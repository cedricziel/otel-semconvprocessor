// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"errors"
	"sync"

	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"

	"go.opentelemetry.io/collector/component"
)

func Meter(settings component.TelemetrySettings) metric.Meter {
	return settings.MeterProvider.Meter("github.com/cedricziel/semconvprocessor/processors/semconvprocessor")
}

func Tracer(settings component.TelemetrySettings) trace.Tracer {
	return settings.TracerProvider.Tracer("github.com/cedricziel/semconvprocessor/processors/semconvprocessor")
}

// TelemetryBuilder provides an interface for components to report telemetry
// as defined in metadata and user config.
type TelemetryBuilder struct {
	meter                                 metric.Meter
	mu                                    sync.Mutex
	registrations                         []metric.Registration
	ProcessorSemconvErrors                metric.Int64Counter
	ProcessorSemconvOriginalSpanNameCount metric.Int64Gauge
	ProcessorSemconvProcessingDuration    metric.Float64Histogram
	ProcessorSemconvReducedSpanNameCount  metric.Int64Gauge
	ProcessorSemconvSpanNamesEnforced     metric.Int64Counter
	ProcessorSemconvSpansProcessed        metric.Int64Counter
}

// TelemetryBuilderOption applies changes to default builder.
type TelemetryBuilderOption interface {
	apply(*TelemetryBuilder)
}

type telemetryBuilderOptionFunc func(mb *TelemetryBuilder)

func (tbof telemetryBuilderOptionFunc) apply(mb *TelemetryBuilder) {
	tbof(mb)
}

// Shutdown unregister all registered callbacks for async instruments.
func (builder *TelemetryBuilder) Shutdown() {
	builder.mu.Lock()
	defer builder.mu.Unlock()
	for _, reg := range builder.registrations {
		reg.Unregister()
	}
}

// NewTelemetryBuilder provides a struct with methods to update all internal telemetry
// for a component
func NewTelemetryBuilder(settings component.TelemetrySettings, options ...TelemetryBuilderOption) (*TelemetryBuilder, error) {
	builder := TelemetryBuilder{}
	for _, op := range options {
		op.apply(&builder)
	}
	builder.meter = Meter(settings)
	var err, errs error
	builder.ProcessorSemconvErrors, err = builder.meter.Int64Counter(
		"otelcol_processor_semconv_errors",
		metric.WithDescription("Number of errors encountered during processing"),
		metric.WithUnit("{errors}"),
	)
	errs = errors.Join(errs, err)
	builder.ProcessorSemconvOriginalSpanNameCount, err = builder.meter.Int64Gauge(
		"otelcol_processor_semconv_original_span_name_count",
		metric.WithDescription("Number of unique span names before enforcement"),
		metric.WithUnit("{names}"),
	)
	errs = errors.Join(errs, err)
	builder.ProcessorSemconvProcessingDuration, err = builder.meter.Float64Histogram(
		"otelcol_processor_semconv_processing_duration",
		metric.WithDescription("Time taken to process a batch of telemetry"),
		metric.WithUnit("ms"),
		metric.WithExplicitBucketBoundaries([]float64{0.01, 0.05, 0.1, 0.5, 1, 5, 10, 50, 100}...),
	)
	errs = errors.Join(errs, err)
	builder.ProcessorSemconvReducedSpanNameCount, err = builder.meter.Int64Gauge(
		"otelcol_processor_semconv_reduced_span_name_count",
		metric.WithDescription("Number of unique span names after enforcement"),
		metric.WithUnit("{names}"),
	)
	errs = errors.Join(errs, err)
	builder.ProcessorSemconvSpanNamesEnforced, err = builder.meter.Int64Counter(
		"otelcol_processor_semconv_span_names_enforced",
		metric.WithDescription("Number of span names changed to match semantic conventions"),
		metric.WithUnit("{operations}"),
	)
	errs = errors.Join(errs, err)
	builder.ProcessorSemconvSpansProcessed, err = builder.meter.Int64Counter(
		"otelcol_processor_semconv_spans_processed",
		metric.WithDescription("Number of spans processed by the processor"),
		metric.WithUnit("{spans}"),
	)
	errs = errors.Join(errs, err)
	return &builder, errs
}
