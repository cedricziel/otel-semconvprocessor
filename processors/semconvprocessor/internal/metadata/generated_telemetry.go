// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"context"
	"errors"

	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/metric/noop"
	"go.uber.org/zap"

	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/config/configtelemetry"
)

// AttributeSignalType specifies the a value signal_type attribute.
type AttributeSignalType int

const (
	_ AttributeSignalType = iota
	AttributeSignalTypeTraces
	AttributeSignalTypeMetrics
	AttributeSignalTypeLogs
)

// String returns the string representation of the AttributeSignalType.
func (av AttributeSignalType) String() string {
	switch av {
	case AttributeSignalTypeTraces:
		return "traces"
	case AttributeSignalTypeMetrics:
		return "metrics"
	case AttributeSignalTypeLogs:
		return "logs"
	}
	return ""
}

// AttributeConventionType specifies the a value convention_type attribute.
type AttributeConventionType int

const (
	_ AttributeConventionType = iota
	AttributeConventionTypeHTTP
	AttributeConventionTypeDatabase
	AttributeConventionTypeMessaging
	AttributeConventionTypeCustom
)

// String returns the string representation of the AttributeConventionType.
func (av AttributeConventionType) String() string {
	switch av {
	case AttributeConventionTypeHTTP:
		return "http"
	case AttributeConventionTypeDatabase:
		return "database"
	case AttributeConventionTypeMessaging:
		return "messaging"
	case AttributeConventionTypeCustom:
		return "custom"
	}
	return ""
}

// AttributeErrorType specifies the a value error_type attribute.
type AttributeErrorType int

const (
	_ AttributeErrorType = iota
	AttributeErrorTypeProcessing
	AttributeErrorTypeValidation
	AttributeErrorTypeUnknown
)

// String returns the string representation of the AttributeErrorType.
func (av AttributeErrorType) String() string {
	switch av {
	case AttributeErrorTypeProcessing:
		return "processing"
	case AttributeErrorTypeValidation:
		return "validation"
	case AttributeErrorTypeUnknown:
		return "unknown"
	}
	return ""
}

// TelemetryBuilder provides an interface for components to report telemetry.
type TelemetryBuilder struct {
	logger                                     *zap.Logger
	ProcessorSemconvAttributesRenamed          metric.Int64Counter
	ProcessorSemconvAttributesCopied           metric.Int64Counter
	ProcessorSemconvAttributesMoved            metric.Int64Counter
	ProcessorSemconvSpansProcessed             metric.Int64Counter
	ProcessorSemconvSpanNamesEnforced          metric.Int64Counter
	ProcessorSemconvProcessingDuration         metric.Float64Histogram
	ProcessorSemconvErrors                     metric.Int64Counter
	level                                      configtelemetry.Level
}

// NewTelemetryBuilder creates a new TelemetryBuilder.
func NewTelemetryBuilder(settings component.TelemetrySettings) (*TelemetryBuilder, error) {
	builder := &TelemetryBuilder{
		logger: settings.Logger,
		level:  configtelemetry.LevelDetailed, // Default to detailed level
	}

	meter := settings.MeterProvider.Meter("go.opentelemetry.io/collector/processor/semconvprocessor")

	var err, errs error

	builder.ProcessorSemconvAttributesRenamed, err = meter.Int64Counter(
		"processor_semconv_attributes_renamed",
		metric.WithDescription("Number of attributes renamed by the processor"),
		metric.WithUnit("{operations}"),
	)
	errs = errors.Join(errs, err)

	builder.ProcessorSemconvAttributesCopied, err = meter.Int64Counter(
		"processor_semconv_attributes_copied",
		metric.WithDescription("Number of attributes copied by the processor"),
		metric.WithUnit("{operations}"),
	)
	errs = errors.Join(errs, err)

	builder.ProcessorSemconvAttributesMoved, err = meter.Int64Counter(
		"processor_semconv_attributes_moved",
		metric.WithDescription("Number of attributes moved by the processor"),
		metric.WithUnit("{operations}"),
	)
	errs = errors.Join(errs, err)

	builder.ProcessorSemconvSpansProcessed, err = meter.Int64Counter(
		"processor_semconv_spans_processed",
		metric.WithDescription("Number of spans processed by the processor"),
		metric.WithUnit("{spans}"),
	)
	errs = errors.Join(errs, err)

	builder.ProcessorSemconvSpanNamesEnforced, err = meter.Int64Counter(
		"processor_semconv_span_names_enforced",
		metric.WithDescription("Number of span names changed to match semantic conventions"),
		metric.WithUnit("{operations}"),
	)
	errs = errors.Join(errs, err)

	builder.ProcessorSemconvProcessingDuration, err = meter.Float64Histogram(
		"processor_semconv_processing_duration",
		metric.WithDescription("Time taken to process a batch of telemetry"),
		metric.WithUnit("ms"),
		metric.WithExplicitBucketBoundaries(0.01, 0.05, 0.1, 0.5, 1, 5, 10, 50, 100),
	)
	errs = errors.Join(errs, err)

	builder.ProcessorSemconvErrors, err = meter.Int64Counter(
		"processor_semconv_errors",
		metric.WithDescription("Number of errors encountered during processing"),
		metric.WithUnit("{errors}"),
	)
	errs = errors.Join(errs, err)

	if errs != nil {
		return nil, errs
	}

	// Use noop implementations if telemetry level is none
	if builder.level == configtelemetry.LevelNone {
		builder.ProcessorSemconvAttributesRenamed = noop.Int64Counter{}
		builder.ProcessorSemconvAttributesCopied = noop.Int64Counter{}
		builder.ProcessorSemconvAttributesMoved = noop.Int64Counter{}
		builder.ProcessorSemconvSpansProcessed = noop.Int64Counter{}
		builder.ProcessorSemconvSpanNamesEnforced = noop.Int64Counter{}
		builder.ProcessorSemconvProcessingDuration = noop.Float64Histogram{}
		builder.ProcessorSemconvErrors = noop.Int64Counter{}
	}

	return builder, nil
}

// RecordProcessorSemconvAttributesRenamedDataPoint records a data point for processor_semconv_attributes_renamed metric.
func (tb *TelemetryBuilder) RecordProcessorSemconvAttributesRenamedDataPoint(ctx context.Context, value int64, attrs ...attribute.KeyValue) {
	tb.ProcessorSemconvAttributesRenamed.Add(ctx, value, metric.WithAttributes(attrs...))
}

// RecordProcessorSemconvAttributesCopiedDataPoint records a data point for processor_semconv_attributes_copied metric.
func (tb *TelemetryBuilder) RecordProcessorSemconvAttributesCopiedDataPoint(ctx context.Context, value int64, attrs ...attribute.KeyValue) {
	tb.ProcessorSemconvAttributesCopied.Add(ctx, value, metric.WithAttributes(attrs...))
}

// RecordProcessorSemconvAttributesMovedDataPoint records a data point for processor_semconv_attributes_moved metric.
func (tb *TelemetryBuilder) RecordProcessorSemconvAttributesMovedDataPoint(ctx context.Context, value int64, attrs ...attribute.KeyValue) {
	tb.ProcessorSemconvAttributesMoved.Add(ctx, value, metric.WithAttributes(attrs...))
}

// RecordProcessorSemconvSpansProcessedDataPoint records a data point for processor_semconv_spans_processed metric.
func (tb *TelemetryBuilder) RecordProcessorSemconvSpansProcessedDataPoint(ctx context.Context, value int64, signalType AttributeSignalType, attrs ...attribute.KeyValue) {
	allAttrs := append(attrs, attribute.String("signal_type", signalType.String()))
	tb.ProcessorSemconvSpansProcessed.Add(ctx, value, metric.WithAttributes(allAttrs...))
}

// RecordProcessorSemconvSpanNamesEnforcedDataPoint records a data point for processor_semconv_span_names_enforced metric.
func (tb *TelemetryBuilder) RecordProcessorSemconvSpanNamesEnforcedDataPoint(ctx context.Context, value int64, conventionType AttributeConventionType, attrs ...attribute.KeyValue) {
	allAttrs := append(attrs, attribute.String("convention_type", conventionType.String()))
	tb.ProcessorSemconvSpanNamesEnforced.Add(ctx, value, metric.WithAttributes(allAttrs...))
}

// RecordProcessorSemconvProcessingDurationDataPoint records a data point for processor_semconv_processing_duration metric.
func (tb *TelemetryBuilder) RecordProcessorSemconvProcessingDurationDataPoint(ctx context.Context, value float64, signalType AttributeSignalType, attrs ...attribute.KeyValue) {
	allAttrs := append(attrs, attribute.String("signal_type", signalType.String()))
	tb.ProcessorSemconvProcessingDuration.Record(ctx, value, metric.WithAttributes(allAttrs...))
}

// RecordProcessorSemconvErrorsDataPoint records a data point for processor_semconv_errors metric.
func (tb *TelemetryBuilder) RecordProcessorSemconvErrorsDataPoint(ctx context.Context, value int64, errorType AttributeErrorType, attrs ...attribute.KeyValue) {
	allAttrs := append(attrs, attribute.String("error_type", errorType.String()))
	tb.ProcessorSemconvErrors.Add(ctx, value, metric.WithAttributes(allAttrs...))
}

// Shutdown releases any resources held by the telemetry builder.
func (tb *TelemetryBuilder) Shutdown(ctx context.Context) error {
	return nil
}