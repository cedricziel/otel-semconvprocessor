# Sample OpenTelemetry Collector configuration with semconv processor
receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

processors:
  # Batch processor for better performance
  batch:
    timeout: 1s
    send_batch_size: 1024

  # Resource processor to enrich collector internal metrics
  resource/collector-telemetry:
    attributes:
      - key: collector.name
        value: "otelcol-semconv"
        action: insert
      - key: collector.version
        value: "0.130.0"
        action: insert
      - key: telemetry.source
        value: "internal"
        action: insert

  # Semantic convention processor for cardinality reduction
  semconv:
    enabled: true
    benchmark: true  # Enable cardinality tracking metrics
    span_processing:
      enabled: true
      mode: "enforce"  # Use "enrich" to only add attributes without changing span names
      preserve_original_name: true
      operation_name_attribute: "operation.name"
      operation_type_attribute: "operation.type"
      original_name_attribute: "name.original"
      rules:
        # Rule Priority Ranges:
        # 100-199: HTTP operations
        # 200-299: GraphQL operations
        # 300-399: Database operations
        # 400-499: RPC/gRPC operations
        # 500-599: Messaging operations
        # 600+: Internal/generic operations
        #
        # Cardinality Reduction Strategy:
        # - Use templated routes instead of raw paths
        # - Normalize paths with NormalizePath() to replace IDs
        # - Parse SQL statements instead of using raw queries
        # - Avoid high-cardinality attributes like document IDs, bucket names, cron expressions
        # - Support both old and new semantic conventions using FirstNonNil()

        # HTTP server spans - route normalization (supports both old and new conventions)
        - id: "http_server_routes"
          priority: 100
          span_kind: ["server"]
          condition: 'FirstNonNil([attributes["http.request.method"], attributes["http.method"]]) != nil and attributes["http.route"] != nil'
          operation_name: 'Concat([FirstNonNil([attributes["http.request.method"], attributes["http.method"]]), attributes["http.route"]], " ")'
          operation_type: '"http"'

        # HTTP server spans - method only (supports both old and new conventions)
        - id: "http_server_method_only"
          priority: 110
          span_kind: ["server"]
          condition: 'FirstNonNil([attributes["http.request.method"], attributes["http.method"]]) != nil and attributes["http.route"] == nil'
          operation_name: 'Concat(["HTTP", FirstNonNil([attributes["http.request.method"], attributes["http.method"]])], " ")'
          operation_type: '"http"'

        # HTTP client spans - with url.template (supports both old and new conventions)
        - id: "http_client_template"
          priority: 140
          span_kind: ["client"]
          condition: 'FirstNonNil([attributes["http.request.method"], attributes["http.method"]]) != nil and attributes["url.template"] != nil'
          operation_name: 'Concat([FirstNonNil([attributes["http.request.method"], attributes["http.method"]]), attributes["url.template"]], " ")'
          operation_type: '"http_client"'

        # HTTP client spans - method only (supports both old and new conventions)
        - id: "http_client_method_only"
          priority: 145
          span_kind: ["client"]
          condition: 'FirstNonNil([attributes["http.request.method"], attributes["http.method"]]) != nil and attributes["url.template"] == nil'
          operation_name: 'Concat(["HTTP", FirstNonNil([attributes["http.request.method"], attributes["http.method"]])], " ")'
          operation_type: '"http_client"'

        # HTTP client spans - URL normalization (supports both old and new conventions)
        - id: "http_client_requests"
          priority: 150
          span_kind: ["client"]
          condition: 'FirstNonNil([attributes["http.request.method"], attributes["http.method"]]) != nil and attributes["http.url"] != nil'
          operation_name: 'Concat([FirstNonNil([attributes["http.request.method"], attributes["http.method"]]), RemoveQueryParams(attributes["http.url"])], " ")'
          operation_type: '"http_client"'

        # HTTP path normalization (supports both old and new conventions)
        - id: "http_paths"
          priority: 200
          condition: 'FirstNonNil([attributes["http.request.method"], attributes["http.method"]]) != nil and attributes["url.path"] != nil'
          operation_name: 'Concat([FirstNonNil([attributes["http.request.method"], attributes["http.method"]]), NormalizePath(attributes["url.path"])], " ")'
          operation_type: '"http"'

        # GraphQL operations
        - id: "graphql_operations"
          priority: 250
          condition: 'attributes["graphql.operation.type"] != nil and attributes["graphql.operation.name"] != nil'
          operation_name: 'Concat([attributes["graphql.operation.type"], attributes["graphql.operation.name"]], " ")'
          operation_type: '"graphql"'

        # Database client operations - SQL parsing
        - id: "database_queries"
          priority: 300
          span_kind: ["client"]  # Database calls are typically client spans
          condition: 'attributes["db.statement"] != nil'
          operation_name: 'ParseSQL(attributes["db.statement"])'
          operation_type: 'attributes["db.system"]'

        # Database client operations - operation and collection
        - id: "database_operations"
          priority: 310
          span_kind: ["client"]
          condition: 'attributes["db.operation"] != nil and attributes["db.collection.name"] != nil'
          operation_name: 'Concat([attributes["db.operation"], attributes["db.collection.name"]], " ")'
          operation_type: 'attributes["db.system"]'

        # FaaS database trigger operations (without document name to reduce cardinality)
        - id: "faas_db_trigger"
          priority: 350
          condition: 'attributes["faas.document.collection"] != nil and attributes["faas.document.operation"] != nil'
          operation_name: 'Concat([attributes["faas.document.collection"], attributes["faas.document.operation"]], " ")'
          operation_type: '"faas_db_trigger"'

        # gRPC server operations
        - id: "grpc_server_operations"
          priority: 400
          span_kind: ["server"]
          condition: 'attributes["rpc.system"] == "grpc" and attributes["rpc.method"] != nil'
          operation_name: 'Concat([attributes["rpc.service"], attributes["rpc.method"]], "/")'
          operation_type: '"grpc"'

        # gRPC client operations
        - id: "grpc_client_operations"
          priority: 450
          span_kind: ["client"]
          condition: 'attributes["rpc.system"] == "grpc" and attributes["rpc.method"] != nil'
          operation_name: 'Concat(["grpc.client", attributes["rpc.service"], attributes["rpc.method"]], "/")'
          operation_type: '"grpc_client"'

        # Messaging operations with operation type and destination
        - id: "messaging_with_operation"
          priority: 500
          span_kind: ["producer", "consumer"]
          condition: 'attributes["messaging.operation.type"] != nil and attributes["messaging.destination.name"] != nil'
          operation_name: 'Concat([attributes["messaging.operation.type"], attributes["messaging.destination.name"]], " ")'
          operation_type: '"messaging"'

        # Messaging operations with operation and destination
        - id: "messaging_operation_name"
          priority: 510
          span_kind: ["producer", "consumer"]
          condition: 'attributes["messaging.operation.name"] != nil and attributes["messaging.destination.name"] != nil'
          operation_name: 'Concat([attributes["messaging.operation.name"], attributes["messaging.destination.name"]], " ")'
          operation_type: '"messaging"'

        # Messaging producer operations (legacy)
        - id: "messaging_producer"
          priority: 520
          span_kind: ["producer"]
          condition: 'attributes["messaging.operation"] == "publish" and attributes["messaging.destination.name"] != nil'
          operation_name: 'Concat(["publish", attributes["messaging.destination.name"]], " ")'
          operation_type: '"messaging"'

        # Messaging consumer operations (legacy)
        - id: "messaging_consumer"
          priority: 530
          span_kind: ["consumer"]
          condition: 'attributes["messaging.operation"] == "process" and attributes["messaging.destination.name"] != nil'
          operation_name: 'Concat(["process", attributes["messaging.destination.name"]], " ")'
          operation_type: '"messaging"'

        # Messaging operations with system and destination
        - id: "messaging_system"
          priority: 540
          span_kind: ["producer", "consumer"]
          condition: 'attributes["messaging.system"] != nil and attributes["messaging.destination.name"] != nil'
          operation_name: 'Concat([attributes["messaging.system"], attributes["messaging.destination.name"]], " ")'
          operation_type: '"messaging"'

        # Internal operations
        - id: "internal_operations"
          priority: 600
          span_kind: ["internal"]
          condition: 'attributes["internal.operation"] != nil'
          operation_name: 'attributes["internal.operation"]'
          operation_type: '"internal"'

exporters:
  # Debug exporter for testing
  debug:
    verbosity: basic
    sampling_initial: 10
    sampling_thereafter: 100

  file/benchmark-output:
    path: benchmark/output.log
    rotation:
      max_megabytes: 10

extensions:
  health_check:
    endpoint: 0.0.0.0:13133
  zpages:
    endpoint: 0.0.0.0:55679

service:
  extensions: [health_check, zpages]

  pipelines:
    traces:
      receivers: [otlp]
      processors: [semconv, batch]
      exporters: [debug, file/benchmark-output]

    metrics:
      receivers: [otlp]
      processors: [resource/collector-telemetry, batch]
      exporters: [debug]

    logs:
      receivers: [otlp]
      processors: [batch]
      exporters: [debug]

  telemetry:
    logs:
      level: info
    metrics:
      level: detailed
      readers:
        - pull:
            exporter:
              prometheus:
                host: '0.0.0.0'
                port: 8888
